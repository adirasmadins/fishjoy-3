//var util = require("util");
//var EventEmitter = require("events").EventEmitter;
var express = require('express');
var app = express();
var http = require('http').Server(app);
var io = require('socket.io')(http);
var bodyParser = require('body-parser');
var view = '/view/';
var Generator = require('./game/generator');
var Rooms = require('./game/rooms');
var Global = require('./globals');


var rooms = new Rooms();
var checkConnectionTimeout = null;

process.env.PWD = process.cwd();

app.use(express.static(__dirname));
app.use(bodyParser.urlencoded({extended: false}));
app.set('view engine', 'ejs');
app.set('views', __dirname + view);

app.get('/', function (req, res) {
    checkRoomId(req, res);
    //res.render('index');
});

app.post('/game', function (req, res) {
    checkRoomId(req, res);
});

// LISTENING
http.listen(3300, function () {
    console.log('listening on -- Port 3300');
});

// SOCKET CONNECTION
io.on('connection', function (socket) {
    console.log('----- user connects, '+socket.id);

    socket.on('error', function (err) {
        console.error(err.stack);
    });

    socket.on('createroom', function (data) {
        console.log("CREATE ROOM REQUEST");
        var clientdata = data;
        var selectedDisplay = data.display;
        var selectedW = Global.displayList[selectedDisplay].w;
        var selectedH = Global.displayList[selectedDisplay].h;
        var selectedCannon = Global.maxCannonList[data.cannon];
        var selectedMinBuy = Global.minBuyList[data.minBuy];
        var selectedMaxBuy = Global.maxBuyList[data.maxBuy];
        //console.log("-- selected Min: "+selectedMinBuy+" - Max: "+selectedMaxBuy+" -- Cannon: "+selectedCannon);
        var _cannon = getCannonListByNumber(selectedCannon);

        var game = null;
        var socketid = socket.id;
        var playerid = clientdata.playerid;
        var newRoom = rooms.addRoom(clientdata.name, game, selectedW, selectedH, selectedCannon, selectedMinBuy, selectedMaxBuy);
        //rooms.addPlayer(newRoom, socketid, playerid, 0);

        // move to game page

        var _obj = rooms.getRoomById(newRoom);
        console.log("---- " + _obj.roomname + "(" + _obj.id + ") W: " + _obj.w + " H: " + _obj.h + " Min: " + _obj.minBuy + " Max: " + _obj.maxBuy + " Cannon: " + _obj.cannon);

        //io.to(socketid).emit('enter_room', _obj);
        io.emit('new_room_item', _obj);
    });

    socket.on('initiate', function (data) {
        console.log("----- INITIATE");
        var clientdata = data;
        var playerid = clientdata.playerid;
        var socketid = socket.id;
        socket.room = clientdata.id;
        console.log(socket.id+" come into "+socket.room);

        var selectedRoom = rooms.getRoomById(clientdata.id);
        console.log("---- SELECTED ROOM "+selectedRoom);
        var _g = rooms.getGame(clientdata.id);// selectedRoom.game;
        console.log("---- SOCKET INITIATE of "+clientdata.id+" -- "+_g);

        if (_g == null) {
            console.log("--- SET NEW GAME");
            //_g = new Generator(Global.initialFishNo, selectedRoom.w, selectedRoom.h, selectedRoom.cannonList);
            rooms.setGame(clientdata.id, new Generator(Global.initialFishNo, selectedRoom.w, selectedRoom.h, selectedRoom.cannonList, clientdata.id));
            rooms.getGame(clientdata.id).on("angle_change", function (data) {
                //console.log("3. --- FINAL EMIT "+data.roomid);
                //io.in(data.roomid).emit('change_fish_angle', data);
                broadcastMessage('change_fish_angle', data.roomid, data);
            });

            rooms.getGame(clientdata.id).on("new_fish", function (data) {
                //console.log("3. --- FINAL EMIT "+data.roomid);
                //io.in(data.roomid).emit('new_fish', data);
                broadcastMessage('new_fish', data.roomid, data);
            });

            rooms.getGame(clientdata.id).on("remove_fish", function (data) {
                broadcastMessage('remove_fish', data.roomid, data);
            });

            rooms.getGame(clientdata.id).on("remove_bullet", function (data) {
                broadcastMessage('remove_bullet', data.roomid, data);
            });
            //

        }else{
            console.log("NOT NULL "+rooms.getGame(clientdata.id).getFishes().length);
        }

        console.log("--- GAME is Set "+_g+" fishes? "+rooms.getGame(clientdata.id).getFishes().length);

        rooms.addPlayer(selectedRoom.id, socketid, clientdata.playerid, 0, 0, 0, null);

        var thegame = rooms.getGame(clientdata.id);

        var _passdata = new Object();
        _passdata.cannonList = rooms.getCannonList(clientdata.id);// selectedRoom.cannon;
        _passdata.w = selectedRoom.w;
        _passdata.h = selectedRoom.h;
        _passdata.cannon = rooms.getTotalCannon(clientdata.id);
        _passdata.minBuy = selectedRoom.minBuy;
        _passdata.maxBuy = selectedRoom.maxBuy;
        //cannonTypeList = data.cannonList;
        _passdata.sid = socketid;
        _passdata.fishdata = thegame.getFishes();
        //_passdata.bullet = thegame.getBullet();

        io.to(socket.id).emit('prepare', _passdata);
        //io.to(socket.id).emit('prepare',_g.getFishes());
    });

    socket.on('getroomlist', function () {
        console.log("---- GET ROOM LIST");
        var _roomlist = rooms.getRoomList();
        var _data = [];
        for(var i=0; i < _roomlist.length; i++){
            var current = _roomlist[i];
            var _obj = {};
            _obj.id = current.id;
            _obj.roomname = current.roomname;
            _obj.w = current.w;
            _obj.h = current.h;
            _obj.cannon = current.cannon;
            _obj.minBuy = current.minBuy;
            _obj.maxBuy = current.maxBuy;

            _data.push(_obj);
        }

        io.to(socket.id).emit('getroomlist', _data);
    });

    socket.on('getcannonpos', function (roomid) {
        console.log("---- GET CANNON POS");
        io.to(socket.id).emit('getcannonpos', rooms.getCannonList(roomid));
    });

    socket.on('checkin', function (data) {
        //console.log("---- CHECKIN");
        var clientdata = data;

        // CHECK PLAYER COIN IS AVAILABLE
        var isAvailable = true;//checkPlayerCoinAvaialable(clientdata.playerid, clientdata.coin);

        if (isAvailable) {
            // console.log("---- position: "+clientdata.position);
            rooms.changePlayerStatus(clientdata.roomid, socket.id, 1, clientdata.position, clientdata.score, clientdata.coin, clientdata.playerid);

            //updatePlayerListInGenerator(clientdata.roomid);

            socket.room = clientdata.roomid;
            socket.join(clientdata.roomid);

            var _outputdata = {};
            _outputdata.position = clientdata.position;
            _outputdata.score = clientdata.score;
            _outputdata.coin = clientdata.coin;

            // OPEN UP IF READY
            //io.to(socket.id).emit('checkin', _outputdata);

            broadcastMessage('new_join', clientdata.roomid, rooms.getCannonList(clientdata.roomid));
        } else {
            io.to(socket.id).emit('not_available_coin');
        }

    });


    socket.on("shot", function(data){
        var clientdata = data;
        var roomId = clientdata.roomid;
        var _g = rooms.getGame(roomId);
        _g.newbullet(clientdata, socket.id);
        broadcastMessageExceptSender('new_bullet', clientdata.roomid, data, socket.id);
    });

    socket.on("change_cannon_angle", function(data){
        var clientdata = data;
        var roomId = clientdata.roomid;
        var _g = rooms.getGame(roomId);
        _g.setCannon(clientdata.rot, clientdata.type, clientdata.size);
        broadcastMessageExceptSender('change_cannon_angle', clientdata.roomid, data, socket.id);
    });

    /*


    socket.on('topup', function (data) {
        // CHECK PLAYER COIN IS AVAILABLE
        var clientdata = data;
        var isAvailable = checkPlayerCoinAvaialable(clientdata.playerid, clientdata.coin);
        console.log("---- LISTEN TO TOPUP " + clientdata.coin);
        if (isAvailable) {
            rooms.changePlayerCoin(socket.id, clientdata.roomid, clientdata.coin);
        }

        var _outputdata = {};
        _outputdata.pass = isAvailable;

        io.to(socket.id).emit('topup', _outputdata);
    });


    socket.on('standout', function (data) {
        // save coin/score first
        var clientdata = data;
        console.log("--- Get Standout from " + clientdata.roomid + " -- id: " + clientdata.id + " coin: " + clientdata.coin + " playerid: " + clientdata.playerid);
        rooms.changePlayerStatus(clientdata.roomid, clientdata.id, 0, 0, clientdata.coin, clientdata.playerid);
        //updatePlayerListInGenerator(clientdata.roomid);

        var _list = rooms.getCannonList(clientdata.roomid);
        var _data = {};
        _data.cannonList = _list;

        io.to(socket.id).emit('standout');
        broadcastMessage('new_join', clientdata.roomid, _list);
    });


    socket.on('shot', function (data) {
        var _g = getGameData(data.roomname);
        if (rooms.checkCoinAvailable(data.roomname, socket.id, data.type)) {
            _g.newbullet(data, socket.id);
        } else {
            console.log(" NOT ENOUGH COIN FOR SHOT");
            io.to(socket.id).emit("not_enough_coin");
        }
    });

    socket.on('cannon', function (data) {
        //var _g = getGameData(socket.room);
        var _g = getGameData(data.roomname);
        _g.setCannon(data.angle, data.id, data.type);
    });

    socket.on('change_cannon_type', function (data) {
        var _g = getGameData(data.roomname);
        if (_g !== null) {
            _g.setIndividualCannon(data.id, data.type);
        }
    });

    socket.on('checkout', function (data) {
        // save coin/score first
        var clientdata = data;
        removePlayer(clientdata.roomid, clientdata.sid);

        console.log("--- CHECK OUT FROM " + clientdata.roomid);

        if (clientdata.roomid) {
            console.log("---- AFTER CHECKOUT");
            rooms.showCannonList(clientdata.roomid);
            broadcastMessage('new_join', clientdata.roomid, rooms.getCannonList(clientdata.roomid));
            //io.to(sid).emit('new_join', rooms.getCannonList(clientdata.roomid));
        }

        io.to(socket.id).emit('checkout');
        socket.leave(socket.room);

    });
    */
    socket.on('disconnect', function () {
        console.log('user disconnect id: ' + socket.id + " -- room: " + socket.room);

        removePlayer(socket.id, socket.room);

        console.log("--- DISCONNECT FROM " + socket.room);

        if (socket.room) {


            var selectedRoom = rooms.getRoomById(socket.room);
            var players = rooms.getRoomPlayers(socket.room);

            console.log("---- AFTER DISCONNECT Players left "+players.length);

            // check if no player
            if(players.length < 1){

                rooms.getGame(socket.room).destroy();
                rooms.removeGame(socket.room)
                selectedRoom.active  = false;
                //selectedRoom.player_driver = null;
            }

            rooms.showCannonList(socket.room);
            //broadcastMessage('new_join', socket.room, rooms.getCannonList(socket.room));
            //io.to(sid).emit('new_join', rooms.getCannonList(clientdata.roomid));
        }


        socket.leave(socket.room);
    });



    /*
    socket.on('check_connection', function () {
        io.to(socket.id).emit('check_connection');
    });

    socket.on('game_update', function (data) {
       // get game data from player driver
        var gamedata = data;
        var gameId = data.roomid;
        var selectedRoom = rooms.getRoomById(gameId);
        //selectedRoom.game = {fish:gamedata.fishdata, bullet:gamedata.bulletdata};

        //console.log("--- game "+selectedRoom.game);
        //update();
    });

    socket.on('new_fish',function(data){
        var gamedata = data;
        var gameId = gamedata.roomid;
        var selectedRoom = rooms.getRoomById(gameId);
        //console.log("++ New Fish "+data.isFlip);
        //socket.broadcast.to(gameId).emit('new_fish', data);
        broadcastMessageExceptSender('new_fish', gameId, data, socket.id);
        //socket.broadcast.to(gameId).emit('new_fish', data.object);
    });

    socket.on('change_fish_angle',function(data){
        var gameId = data.roomid;
        var selectedRoom = rooms.getRoomById(gameId);

        //console.log("++ change angle "+gameId+"-- "+data.angle);
        //socket.broadcast.to(gameId).emit('change_fish_angle', data);
        broadcastMessageExceptSender('change_fish_angle', gameId, data, socket.id);
        //socket.broadcast.to(gameId).emit('change_fish_angle', fish);
    });
    */
});

// FUNCTIONS
function connectionTimeOut(){

}

function checkRoomId(req, res) {
    res.header("CacheControl", "no-cache,private,no-store,must-revalidate,max-stale=0,post-check=0,pre-check=0");
    //console.log("--- body room id: "+req.body.roomId);
    if (req.body.roomId == null) {
        console.log("--- no room id yet");
        res.render('index');
    } else {
        console.log('Start the game of '+req.body.roomId);
        selectRoom(req.body.roomId);
        res.render('game', {roomId: req.body.roomId});
    }
}

function selectRoom(roomid) {
    var selectedRoom = rooms.getRoomById(roomid);
    var _cannon = getCannonListByNumber(selectedRoom.cannon);

    //console.log("-- total cannon: "+selectedRoom.cannon+" from "+roomid);

    var _cannonList = rooms.getCannonList(roomid);
    if (_cannonList.length < 1) {
        rooms.setCannonListByRoomId(roomid, _cannon);
    }
    return;
}

function checkPlayerCoinAvaialable(playerid) {
    // some check here
    return true;
}

function broadcastMessageExceptSender(emitKey, roomid, param, sender) {
    //console.log("BROADCAST MESSAGE EXCEPT SENDER "+emitKey+" TO "+roomid+"-- "+param);
    var _players = rooms.getRoomPlayers(roomid);
    for (var i = 0; i   < _players.length; i++) {
        var sid = _players[i].socketid;
        //console.log(i+" - "+sid+" of "+sender);
        if(sid !== sender){
           // console.log(" send to "+sid);
            io.to(sid).emit(emitKey, param);
        }else{
            if(emitKey == "new_bullet"){
                console.log(emitKey+"--- it's sender");
            }
        }
    }
}

function broadcastMessage(emitKey, roomid, param) {
    //console.log("BROADCAST MESSAGE "+emitKey+" TO "+roomid);
    var _players = rooms.getRoomPlayers(roomid);
    //console.log("total player: "+_players.length);
    for (var i = 0; i < _players.length; i++) {
        var sid = _players[i].socketid;
        io.to(sid).emit(emitKey, param);
    }
}

function removePlayer(id, rname) {
    console.log("REMOVE Player "+ id +" from "+rname);
    if (rname) {
        rooms.removePlayer(rname, id);
        rooms.removePlayerToCannonlist(rname, id);

    }

    return;
}


function removeRoom(roomid) {
    var _g = rooms.getGame(roomid);
    _g.destroy();
    rooms.removeRoom(roomid);

}

function getCannonListByNumber(noOfCannon) {
    var _cannon = [];
    for (var i = 0; i < Global.cannon.length; i++) {
        var _cCannon = Global.cannon[i].type;
        for (var j = 0; j < _cCannon.length; j++) {
            var _type = _cCannon[j];
            if (_type == noOfCannon) {
                _cannon.push(Global.cannon[i]);
                break;
            }
        }
    }

    return _cannon;
}

function getGameData(rname) {
    var data = [];
    var _list = rooms.getRoomList();
    for (var i = 0; i < _list.length; i++) {
        if (_list[i].id == rname) {
            return _list[i].game;
        }
    }
    return data;
}

function saveGameData(rname, data) {
    var _list = rooms.getRoomList();
    for (i = 0; i < _list.length; i++) {
        if (_list[i].id == rname) {
            _list[i].game = data;
            break;
        }
    }

    return;
}

/*
 // sending to sender-client only
 socket.emit('message', "this is a test");

 // sending to all clients, include sender
 io.emit('message', "this is a test");

 // sending to all clients except sender
 socket.broadcast.emit('message', "this is a test");

 // sending to all clients in 'game' room(channel) except sender
 socket.broadcast.to('game').emit('message', 'nice game');

 // sending to all clients in 'game' room(channel), include sender
 io.in('game').emit('message', 'cool game');

 // sending to sender client, only if they are in 'game' room(channel)
 socket.to('game').emit('message', 'enjoy the game');

 // sending to all clients in namespace 'myNamespace', include sender
 io.of('myNamespace').emit('message', 'gg');

 // sending to individual socketid
 socket.broadcast.to(socketid).emit('message', 'for your eyes only');
 */
